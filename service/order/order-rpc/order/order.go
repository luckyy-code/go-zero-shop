// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package order

import (
	"context"

	"go-zero-shop/service/order/order-rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRequestOrder  = pb.CreateRequestOrder
	CreateResponseOrder = pb.CreateResponseOrder
	DetailRequestOrder  = pb.DetailRequestOrder
	DetailResponseOrder = pb.DetailResponseOrder
	ListRequest         = pb.ListRequest
	ListResponse        = pb.ListResponse
	PaidRequest         = pb.PaidRequest
	PaidResponse        = pb.PaidResponse
	RemoveRequestOrder  = pb.RemoveRequestOrder
	RemoveResponseOrder = pb.RemoveResponseOrder
	UpdateRequestOrder  = pb.UpdateRequestOrder
	UpdateResponseOrder = pb.UpdateResponseOrder

	Order interface {
		Create(ctx context.Context, in *CreateRequestOrder, opts ...grpc.CallOption) (*CreateResponseOrder, error)
		Update(ctx context.Context, in *UpdateRequestOrder, opts ...grpc.CallOption) (*UpdateResponseOrder, error)
		Remove(ctx context.Context, in *RemoveRequestOrder, opts ...grpc.CallOption) (*RemoveResponseOrder, error)
		Detail(ctx context.Context, in *DetailRequestOrder, opts ...grpc.CallOption) (*DetailResponseOrder, error)
		List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
		Paid(ctx context.Context, in *PaidRequest, opts ...grpc.CallOption) (*PaidResponse, error)
		CreateRevert(ctx context.Context, in *CreateRequestOrder, opts ...grpc.CallOption) (*CreateResponseOrder, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) Create(ctx context.Context, in *CreateRequestOrder, opts ...grpc.CallOption) (*CreateResponseOrder, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultOrder) Update(ctx context.Context, in *UpdateRequestOrder, opts ...grpc.CallOption) (*UpdateResponseOrder, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultOrder) Remove(ctx context.Context, in *RemoveRequestOrder, opts ...grpc.CallOption) (*RemoveResponseOrder, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Remove(ctx, in, opts...)
}

func (m *defaultOrder) Detail(ctx context.Context, in *DetailRequestOrder, opts ...grpc.CallOption) (*DetailResponseOrder, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Detail(ctx, in, opts...)
}

func (m *defaultOrder) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultOrder) Paid(ctx context.Context, in *PaidRequest, opts ...grpc.CallOption) (*PaidResponse, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.Paid(ctx, in, opts...)
}

func (m *defaultOrder) CreateRevert(ctx context.Context, in *CreateRequestOrder, opts ...grpc.CallOption) (*CreateResponseOrder, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.CreateRevert(ctx, in, opts...)
}
